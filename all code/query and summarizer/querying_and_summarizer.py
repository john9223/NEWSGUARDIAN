# -*- coding: utf-8 -*-
"""Querying and Summarizer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V6ASU_Ma7eUJNyDMkwm98QmEOrS7IqZK

### Installing all libraries
"""

!pip install transformers
!pip install sentence-transformers
!pip install googlesearch.py

"""### Invoking all libraries"""

from sentence_transformers import SentenceTransformer, util
import numpy as np
import pandas as pd

"""### Downloading Transformer weights"""

model = SentenceTransformer('stsb-roberta-large')

"""### Googlesearch library"""

import googlesearch_py

query = "defaced mahathma gandhi statue"

results = googlesearch_py.search(query)

results

addme = []

for i in range(0,len(results)):
  fine = results[i].get('title') 
  addme.append(fine)

addme

import spacy

nlp = spacy.load('en_core_web_sm')

text = "anirudh ravichander is a music composer"

# Tokenize the text
doc = nlp(text)

# Extract the subject, verb, and object
subject = ""
verb = ""
object = ""
for token in doc:
    if token.dep_ == 'nsubj':
        subject = token.text
    elif token.dep_ == 'ROOT':
        verb = token.text
    elif token.dep_ == 'dobj':
        object = token.text

# Create the question
if subject and verb:
    question = f"What {verb} {object}?"
    print(question)
else:
    print("Could not create a question from the given text.")

"""### Checking semantic similarity"""

eight = []


for i in range(0,len(addme)):
  sen1 = model.encode(query, convert_to_tensor=True)
  sen2 = model.encode(addme[i], convert_to_tensor=True)
  cosine_scores = list(util.pytorch_cos_sim(sen1, sen2).reshape(-1).tolist())
  eight.append(cosine_scores)
  
eight

"""#### The whole thing was in tensors, so i made it to a 2d array and then to sweet lil list."""

nine = []

for i in range(0, len(eight)):
  nine.append(eight[i][0])

nine

avg = sum(nine) / len(nine)  # calculate average
print(avg)

threshold = 0.45

if avg >= threshold :
   print("news is Real")

else:
  print("news is Fake")





